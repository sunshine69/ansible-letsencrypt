# This task file is based per cases to deal with how to verify domain.
# You should add your own code to the shell section below to copy the newly
# cert and key and restart your services

# In this you have to provide a way to verify your domain to letsencrypt
# Samples to use duckdns.org, aws route53 and by default spawn a http server at port 80 for http-01

- block:
  - name: Update TXT record to duckdns.org
    uri:
      url: 'https://www.duckdns.org/update?domains={{ cert_domain }}&token={{ duckdns_org_account_token }}&txt={{ item.value[0] }}&verbose=true&clear=false'
    loop: "{{ query('dict', sample_com_challenge.challenge_data_dns|default({})) }}"
  when: sample_com_challenge is changed and letsencrypt_challenge == "dns-01" and dns_method == "duckdns"

- block:
    - name: Update TXT record to maradns config
      lineinfile:
        path: /etc/maradns/{{ cert_domain }}
        regexp: '^_acme-challenge\.{{ item.key }}\. .*$'
        line: "{{ item.key }}. TXT '{{ item.value[0] }}'"
      loop: "{{ query('dict', sample_com_challenge.challenge_data_dns|default({})) }}"
      become: yes
    - shell: systemctl restart maradns
  when: sample_com_challenge is changed and letsencrypt_challenge == "dns-01" and dns_method == "maradns"


# Sample to update aws route53
- block:
    - name: Update TXT record to aws
      route53:
        profile: {{ route53_aws_profile }}
        state: present
        zone: "{{ route53_zone }}"
        record: "{{ item.key }}"
        type: TXT
        value: '"{{ item.value[0] }}"'
        overwrite: yes
      loop: "{{ query('dict', sample_com_challenge.challenge_data_dns|default({})) }}"
  when: sample_com_challenge is changed and letsencrypt_challenge == "dns-01" and dns_method == "route53"

- block:
    - when: not sample_com_challenge['challenge_data']
      debug:
        msg: "challenge_data is empty. Saw in staging directory where the server return changes is yes but no challenge data"

    - name: Start simple python web server at port 80
      shell: "python3 -m http.server 80"
      async: 600
      poll: 0
      register: python_server_task
      become: yes
      args:
        chdir: "{{ work_dir }}"

    - name: Create challenge resources
      file:
        path: "{{ work_dir }}/.well-known/acme-challenge"
        state: directory
    - shell: "rm -f {{ work_dir }}/.well-known/acme-challenge/* || true"
    - copy:
        dest: "{{ work_dir }}/{{ sample_com_challenge['challenge_data'][cert_domain]['http-01']['resource'] }}"
        content: "{{ sample_com_challenge['challenge_data'][cert_domain]['http-01']['resource_value'] }}"
  when: sample_com_challenge is changed and sample_com_challenge['challenge_data'] and letsencrypt_challenge == "http-01"

- pause:
    minutes: 5
    prompt: "Wait for DNS propagation"

- acme_certificate:
    account_key: "{{ work_dir }}/account.key"
    account_email: "{{ account_email }}"
    acme_version: 2
    terms_agreed: yes
    acme_directory: "{{ acme_directory }}"
    csr: "{{ work_dir }}/{{ cert_domain_filename }}.csr"
    dest: "{{ work_dir }}/{{ cert_domain_filename }}.crt"
    challenge: "{{ letsencrypt_challenge|default('dns-01') }}"
    remaining_days: "{{ remaining_days }}"
    data: "{{ sample_com_challenge }}"
  when: sample_com_challenge is changed and sample_com_challenge['challenge_data']

- name: Stop the http server
  shell: |
    pid=$(ps -ef| grep -v grep | grep  'python3 -m http.server 80' | awk '{print $2}')
    kill $pid
  become: yes
  ignore_errors: yes
  when: letsencrypt_challenge == "http-01"

# cert conversion and manipulation. You may store it somewhere for other app to use if the cert is wild cards
- shell: |
    cat {{ cert_domain_filename }}.crt intermediate.pem > chained-{{ cert_domain_filename }}.crt
    mkdir -p /etc/nginx/ssl || true
    cp -a {{ cert_domain_filename }}.key chained-{{ cert_domain_filename }}.crt /etc/nginx/ssl/
    systemctl restart nginx

    # Encrypt key
    # if [ ! -f {{ cert_domain_filename }}.key ]; then
    #   openssl rsa -in {{ cert_domain_filename }}-enc.key -passin pass:'{{ key_passphrase }}' -out {{ cert_domain_filename }}.key
    # fi

    # generate java keystore for jenkins to copy over
    # openssl pkcs12 -inkey {{ cert_domain_filename }}.key -in chained-{{ cert_domain_filename }}.crt  -export -passout pass:'{{ key_passphrase }}' -out {{ cert_domain_filename }}.pkcs12

    # docker run --rm --entrypoint sh -v $(pwd):/work --workdir /work openjdk:15-jdk-alpine3.11 -c  'echo "{{ key_passphrase }}" | keytool -importkeystore -srckeystore {{ cert_domain_filename }}.pkcs12 -srcstoretype pkcs12 -storepass "{{ key_passphrase }}" -destkeystore jenkins.jks -noprompt'

    # mv jenkins.jks ../../jenkins.jks

    # if [ ! -f {{ cert_domain_filename }}-enc.key ]; then
    #   openssl rsa -in {{ cert_domain_filename }}.key -out {{ cert_domain_filename }}-enc.key -passout pass:'{{ key_passphrase }}' -des3
    #   rm -f {{ cert_domain_filename }}.key
    # fi
    # this may fail for the first time as we have not build the image yet
    # ( cd ../../ && yes | ./build.sh update-cert {{ key_passphrase }} )

  args:
    chdir: "{{ work_dir }}"
  async: 300
  poll: 3
  when: sample_com_challenge is changed and sample_com_challenge['challenge_data']
  ignore_errors: yes
